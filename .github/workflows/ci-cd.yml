name: CI/CD with Docker and Droplet

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java 23 using Adoptium
      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      # Step 3: Verify Java version
      - name: Check Java version
        run: java -version

      # Step 4: List files for debugging
      - name: List files for debugging
        run: |
          ls -al

      # Step 5: Build Spring Boot application
      - name: Build Spring Boot application
        run: |
          ./mvnw clean package -DskipTests  # This should generate target/myapp.jar

      # Step 6: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 7: Build Docker image for Spring Boot app
      - name: Build Docker image for Spring Boot
        run: |
          docker build -t my-app-image:latest .  # Ensure target/myapp.jar exists here

      # Step 8: Save Docker image as tar file for transfer
      - name: Save Docker image
        run: |
          docker save my-app-image:latest -o my-app-image.tar

      # Step 9: Transfer Docker image and docker-compose.yml to droplet
      - name: Copy files to droplet
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          source: |
            my-app-image.tar
            docker-compose.yml
          target: ~/

      # Step 10: SSH into droplet, stop running container, and deploy the new one
      - name: Deploy application
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            # Stop the currently running container (springboot-app and grafana)
            if [ "$(docker ps -q -f name=springboot-app)" ]; then
              echo "Stopping springboot-app container..."
              docker stop springboot-app
              docker rm springboot-app
            fi

            if [ "$(docker ps -q -f name=grafana)" ]; then
              echo "Stopping grafana container..."
              docker stop grafana
              docker rm grafana
            fi

            # Load the new Docker image
            docker load -i ~/my-app-image.tar

            # Restart the docker-compose services (springboot-app and grafana)
            docker-compose -f ~/docker-compose.yml up -d --build
